---
title: js矩阵滤镜的运算效率的优化尝试
---

众所周知，对图像数据进行矩阵滤镜运算操作的时候，其运算量是很大的。特别是运行在客户端环境下的js滤镜插件，更有必要重视运算效率的优化。



学习参考
[图像处理中任意核卷积(matlab中conv2函数)的快速实现。](http://www.cnblogs.com/Imageshop/p/4126753.html)


### 优化数组类型


### for循环的嵌套顺序
 ** 多个for循环嵌套时，循环次数越多，越应放在里面层循环。** 改变for循环的嵌套顺数，虽然最后内部代码执行的次数还是一样的，但是最终计数器比较次数却不一样：
``` javascript
for(int i=0;i<1000;i++){
     for(int j=0;j<100;j++){
         for(int k=0;k<10;k++){
             
         }
     }
 }
```
以上代码中，i需要比较1000次，j需要比较1000*100次，k需要比较1000*100*10次。总的比较次数是1000+1000*100+10*100*1000次。

优化后：
``` javascript
for(int k=0;k<10;k++){
     for(int j=0;j<100;j++){
         for(int i=0;i<1000;i++){
             
         }
     }
 }
```
k需要比较10次，j需要比较10*100次，i需要比较10*100*1000次。
总的比较次数是10+10*100+10*100*1000次


在卷积矩阵滤镜中，调整for循环的顺序。对14张500*500的图像做卷积运算，效率有所提升，但是不明显。

### 循环展开技术（loop unrolling）

循环展开是在每次迭代中执行更多的数据操作来减小循环开销的影响，但是这种方法是以程序的可读性为代价的，并且其对机器、编译器的依赖很大，所以这不是个通用的方法。

在颜色矩阵滤镜中借鉴了flash插件的代码[here](http://help.adobe.com/zh_CN/FlashPlatform/reference/actionscript/3/flash/filters/ColorMatrixFilter.html)。
改为js代码如下：
``` javascript
            for(var i = 0; i < len; i += 16){

				t0 = d[i]; t1 = d[i+1]; t2 = d[i+2]; t3 = d[i+3];
                p0  =  m[0]*t0  +  m[1]*t1  +  m[2]*t2  +  m[3]*t3  +  m[4];
                p1  =  m[5]*t0  +  m[6]*t1  +  m[7]*t2  +  m[8]*t3  +  m[9];
                p2  =  m[10]*t0 +  m[11]*t1 +  m[12]*t2 +  m[13]*t3 +  m[14];
                p3  =  m[15]*t0 +  m[16]*t1 +  m[17]*t2 +  m[18]*t3 +  m[19];

                t0 = d[i+4]; t1 = d[i+5]; t2 = d[i+6]; t3 = d[i+7];
                p4  =  m[0]*t0  +  m[1]*t1  +  m[2]*t2  +  m[3]*t3  +  m[4];
                p5  =  m[5]*t0  +  m[6]*t1  +  m[7]*t2  +  m[8]*t3  +  m[9];
                p6  =  m[10]*t0 +  m[11]*t1 +  m[12]*t2 +  m[13]*t3 +  m[14];
                p7  =  m[15]*t0 +  m[16]*t1 +  m[17]*t2 +  m[18]*t3 +  m[19];

                t0 = d[i+8]; t1 = d[i+9]; t2 = d[i+10]; t3 = d[i+11];
                p8  =  m[0]*t0  +  m[1]*t1  +  m[2]*t2  +  m[3]*t3  +  m[4];
                p9  =  m[5]*t0  +  m[6]*t1  +  m[7]*t2  +  m[8]*t3  +  m[9];
                p10  =  m[10]*t0 +  m[11]*t1 +  m[12]*t2 +  m[13]*t3 +  m[14];
                p11  =  m[15]*t0 +  m[16]*t1 +  m[17]*t2 +  m[18]*t3 +  m[19];

                t0 = d[i+12]; t1 = d[i+13]; t2 = d[i+14]; t3 = d[i+15];
                p12  =  m[0]*t0  +  m[1]*t1  +  m[2]*t2  +  m[3]*t3  +  m[4];
                p13  =  m[5]*t0  +  m[6]*t1  +  m[7]*t2  +  m[8]*t3  +  m[9];
                p14  =  m[10]*t0 +  m[11]*t1 +  m[12]*t2 +  m[13]*t3 +  m[14];
                p15  =  m[15]*t0 +  m[16]*t1 +  m[17]*t2 +  m[18]*t3 +  m[19];

                d[i] = p0; d[i+1] = p1; d[i+2] = p2; d[i+3] = p3;
                d[i+4] = p4; d[i+5] = p5; d[i+6] = p6; d[i+7] = p7;
                d[i+8] = p8; d[i+9] = p9; d[i+10] = p10; d[i+11] = p11;
                d[i+12] = p12; d[i+13] = p13; d[i+14] = p14; d[i+15] = p15;

			}

			if(rem){
				for (i = len-rem; i < len; i+=4){
                    t0 = d[i]; t1 = d[i+1]; t2 = d[i+2]; t3 = d[i+3];
					p0  =  m[0]*t0  +  m[1]*t1  +  m[2]*t2  +  m[3]*t3  +  m[4];
					p1  =  m[5]*t0  +  m[6]*t1  +  m[7]*t2  +  m[8]*t3  +  m[9];
					p2  =  m[10]*t0 +  m[11]*t1 +  m[12]*t2 +  m[13]*t3 +  m[14];
					p3  =  m[15]*t0 +  m[16]*t1 +  m[17]*t2 +  m[18]*t3 +  m[19];

					d[i] = p0; d[i+1] = p1; d[i+2] = p2; d[i+3] = p3;
                }
			}
```
但是在实测中，发现这样方式反而比传统的笨方式慢：
``` javascript
for (var i = 0; i < len; i+=4){
    t0 = d[i]; t1 = d[i+1]; t2 = d[i+2]; t3 = d[i+3];
    p0  =  m[0]*t0  +  m[1]*t1  +  m[2]*t2  +  m[3]*t3  +  m[4];
    p1  =  m[5]*t0  +  m[6]*t1  +  m[7]*t2  +  m[8]*t3  +  m[9];
    p2  =  m[10]*t0 +  m[11]*t1 +  m[12]*t2 +  m[13]*t3 +  m[14];
    p3  =  m[15]*t0 +  m[16]*t1 +  m[17]*t2 +  m[18]*t3 +  m[19];

    d[i] = p0; d[i+1] = p1; d[i+2] = p2; d[i+3] = p3;
}
```

### 预设卷积核半径

卷积矩阵滤镜有四层for循环的嵌套，如果能减少for循环的嵌套，就能有效提升运算效率。

我们知道卷积核越小，图像处理越细腻，运算效率也越高。在实际应用中卷积核半径一般是1或2就能满足大部分的需要了。所以我们不妨预设这2种情况，来减少for循环的嵌套：

``` javascript
			switch(r){
				case 1:
					for (var y = 1; y < h-1; y += 1) {//行
						for (var x = 1; x < w-1; x += 1) {//列
							for (var c = 0; c < 3; c += 1) {//rgb
								if(!self.awakeChannels[c])continue;
								var i = (y*w + x)*4 + c;
								oD[i] = (offset||0)
									+(m[0]*iD[i-w*4-4] + m[1]*iD[i-w*4] + m[2]*iD[i-w*4+4]
									+ m[3]*iD[i-4]     + m[4]*iD[i]     + m[5]*iD[i+4]
									+ m[6]*iD[i+w*4-4] + m[7]*iD[i+w*4] + m[8]*iD[i+w*4+4])
									/ (divisor||1);
							}
							oD[(y*w + x)*4 + 3] = 255; // 设置透明度
						}
					}
				break;
				case 2:
					for (var y = 2; y < h-2; y += 1) {//行
						for (var x = 2; x < w-2; x += 1) {//列
							for (var c = 0; c < 3; c += 1) {//rgb
								if(!self.awakeChannels[c])continue;
								var i = (y*w + x)*4 + c;
								oD[i] = (offset||0)
									+(m[0 ]*iD[i-w*8-8] + m[1 ]*iD[i-w*8-4] + m[2 ]*iD[i-w*8] + m[3 ]*iD[i-w*8+4] + m[4 ]*iD[i-w*8+8]
									+ m[5 ]*iD[i-w*4-8] + m[6 ]*iD[i-w*4-4] + m[7 ]*iD[i-w*4] + m[8 ]*iD[i-w*4+4] + m[9 ]*iD[i-w*4+8]
									+ m[10]*iD[i-8]     + m[11]*iD[i-4]     + m[12]*iD[i]     + m[13]*iD[i+4]     + m[14]*iD[i+8]
									+ m[15]*iD[i+w*4-8] + m[16]*iD[i+w*4-4] + m[17]*iD[i+w*4] + m[18]*iD[i+w*4+4] + m[19]*iD[i+w*4+8]
									+ m[20]*iD[i+w*8-8] + m[21]*iD[i+w*8-4] + m[22]*iD[i+w*8] + m[23]*iD[i+w*8+4] + m[24]*iD[i+w*8+8])
									/ (divisor||1);
							}
							oD[(y*w + x)*4 + 3] = 255; // 设置透明度
						}
					}
				break;

				default:

                    for (var y = r; y < h-r; y += 1) {//图像行
                        for (var x = r; x < w-r; x += 1) {//图像列
							for (var c = 0; c < 3; c += 1) {//rgb
								if(!self.awakeChannels[c])continue;
								var i = (y*w + x)*4 + c;//imageData对象的下标
								var v = 0;
								for(var k = 0;k < mLen;k++){//卷积核
									v += m[k]*iD[i+w*4*(Math.floor(k/mW)-r)+4*(k%mW-r)]  ///Math.floor(k/mW)-r 卷积核的第几行即卷积核的y值  k%mW-r 卷积核的第几列即x值  卷积核中心为 [0, 0]
								}
								oD[i] = (offset||0)+v/(divisor||1); ///设置偏移与阈值
							}
							oD[(y*w + x)*4 + 3] = 255; // 设置透明度
						}
					}

			}
```

经测试，在卷积核半径为1或2的情况下，用预设半径的方式对运算效率的提升非常明显。

### 利用矩阵运算的结合律

在颜色矩阵滤镜中，对图像使用多个滤镜，其实就是图像矩阵乘以矩阵a再乘以矩阵b：
图像 = 图像*矩阵A*矩阵B
其过程进行了2次对图像信息的遍历，我们可以利用矩阵乘法的结合律来优化：
图像 = 图像*（矩阵A*矩阵B）
``` javascript
var F1 = new FILTER.Create(imgData);.//新建filter对象
var cmf = new FILTER.ColorMatrixFilter();//新建颜色矩阵滤镜
F1.redChannel(1).invert()//这里相当于红色通道矩阵*反向矩阵
cmf.apply(F1.imgData);//把矩阵滤镜应用到图像数据
```

（在卷积矩阵滤镜中，多个卷积核之间也满足结合律）










